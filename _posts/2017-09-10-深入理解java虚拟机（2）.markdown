---
layout: post
title: 深入理解java虚拟机（2）
date: 2017-09-10 15:32:24.000000000 +09:00
---

### 垃圾回收算法
#### 标记清除算法
主要不足：  
1. 效率问题，标记和清除的过程效率都不高  
2. 空间问题，标记清除之后产生不连续的内存碎片，内存碎片太多会导致在程序运行过程中需要分配较大的对象，无法找到足够的连续内存而不得不提前触发另一次的垃圾回收动作。  

#### 复制算法  
为了解决效率问题，将可用的内存按照容量划分为大小相等的两块，每次只是使用其中的一块。算法的代价将内存缩小为原来的一半，未免太高了。  
eden survivor0 survivor1  
8     :    1      :       1  
每次新生代容量为90%  

#### 标记整理算法  

#### 分代收集算法  
根据新生代和老年代的不同  

在OopMap的协助下，HotSpot可以快速且准确的完成gc roots的枚举
安全点和安全区域  
 
线程sleep和block状态需要引入安全区域来解决  

### 垃圾收集器
7种收集器如下图所示  
![](/images/gc.png)  

#### Serial
![](/images/Serial.png)  
单线程完成收集工作，必须暂停其他所有的工作线程  
从jdk1.3 到 jdk 1.7一直在优化  
从Serial  -> Parallel -> cms(concurrent mark sweep) -> G1 (Garbage first)  
用户停顿的时间在不断缩短，但是仍然没法完全消除  

Serial收集器对于客户端应用来说是很好的选择  

#### ParNew收集器  
![](/images/ParNew.png)  
-XX:SurvivorRatio  -XX:PretenureSizeThreshold  -XX:HandkePromotionFailure  
ParNew 除了多线程收集以外，其他与Serial相比没有太多创新之处

#### CMS  
cms 真正意义上的并发收集器   
-XX:+UseConcMarkSweepGC  
-XX:+UseParNewGC  

可以使用-XX:ParallelGCThreads  

Parallel Scavenge用于精确控制吞吐量  
-XX:MaxGCPauseMillis 最大垃圾收集停顿时间  
-XX:GCTimeRatio  直接设置吞吐量的大小  

-XX:+UseAdaptiveSizePolicy 打开参数之后GC可以自适应调节策略  
在注重吞吐量和cpu资源敏感 可以优先考虑Parallel Scavenge  加 Parallel Old收集器  

CMS收集器  是以获取最短回收停顿时间为目标的收集器  
分为四个过程  
1. 初始标记      
2. 并发标记  
3. 重新标记  
4. 并发清楚  

cms三个缺点  
1. 对于cpu资源特别敏感，在并发阶段虽然不会导致用户线程停顿，但是会因为占用了一部分线程而导致应用程序变慢，总吞吐量降低，cms默认线程数（cpu数量+3/4），当cpu大于4个时候，并发线程占了不少于25%的cpu资源，当cpu不足4个时候，占用了很大运算能力，导致用户的运算降低了50%，让人无法接受。为了应付这种情况，虚拟机提供了 增量式并发收集器 ，效果很一般  
2. cms无法处理浮动垃圾，可能出现Concurrent mode failure 失败导致另一次full GC。由于cms并发清理的阶段，用户线程还在运行，伴随程序还会有新的垃圾产生，这一部分垃圾出现在标记过程之后，cms无法当次收集处理掉他们，只能等到下次GC再处理，这部分垃圾称为浮动垃圾。由于在垃圾收集阶段用户线程还需要运行，那也还需要预留足够的空间给用户线程使用，因此cms不能等到老年代几乎满了再进行收集，需要预留一部分空间提供给并发的程序使用。在jdk1.5默认配置下，cms当老年代使用了68%空间就会被激活，这是一个偏保守的设置，如果应用中老年代增长的不快，可以适当调高-XX:CMSInitiatingOccupancyFraction的值来触发百分比，以降低内存回收次数，获得更好的性能，在jdk1.6中cms启动的阈值已经提高到92%，要是cms运行期间预留的内存无法满足程序的需要，就会出现异常Concurrent Mode Failure 失败，这是虚拟机会启动后备预案，临时启动Serial Old 收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了。所以说-XX:CMSInitiatingOccupancyFraction设置的太高很容易导致Concurrent Mode Failure失败，反而性能下降。  
3. cms基于标记清楚算法实现的收集器，收集结束时会有大量的空间碎片的产生，空间碎片过多，会给大对象分配带来很大麻烦，往往出现空间很足，但是无法找到足够大的连续空间分配给当前对象，不得不提前触发full GC。为了解决这个问题，cms提供一个-XX:+UseCMSCompactAtFullCollection开关参数，默认开启，用于cms收集器顶不住要进行full gc合并整理的过程，内存整理的过程是无法并发的，空间问题没问题了，但是停顿时间变长了。虚拟机还提供了另外的参数-XX:CMSFullGCsBeforeCompaction,这个参数设置多少次不压缩的full gc之后跟着来一次带压缩的，默认为0，表示每次进入full gc都进行碎片压缩。  

#### G1  
G1是面向服务端应用的垃圾收集器，Hotspot赋予它的使命是替换掉cms收集器  
G1的优点：  
1. 并行与并发：G1能够充分利用多CPU，多核硬件优势，使用多个cpu来缩短停顿时间，部分其他收集器需要停顿java线程来执行gc操作，G1可以通过并发方式让java程序继续执行。  
2. 分代收集：与其他收集器一样，分代的概念在G1中依然得到保留，虽然G1可以不需要其他收集器配合就能管理整个堆，能采用不同的方式去处理新创建的对象和已经存活的对象，熬过多次gc的旧对象以获取更好的收集效果。  
3. 空间整合，与cms标记清理算法不同，G1从整体来看基于标记-整理算法实现的收集器，从局部两个Region之间来看基于复制算法实现的，但无论如何，这两种算法都意味着G1运行期间不会产生内存空间碎片，收集后供规整的可用内存，这种特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间触发下一次的Full GC；  
4. 可预测的停顿：这是G1相对于cms另一大优势，降低停顿时间是G1和CMS共同的关注点，单G1追求低停顿以外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒时间片段内，消耗在垃圾收集上的时间不得超过N毫秒，这已经是实时java（RSTJ）时代的特征了。  


[jekyll-docs]: http://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/
