<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hemming</title>
    <description>黑夜给了我一双黑色的眼睛,我却用他寻找光明.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 09 May 2018 11:08:39 +0800</pubDate>
    <lastBuildDate>Wed, 09 May 2018 11:08:39 +0800</lastBuildDate>
    <generator>Jekyll v3.4.0</generator>
    
      <item>
        <title>tensorflow install</title>
        <description>&lt;h3 id=&quot;1安装python虚拟环境&quot;&gt;1.安装python虚拟环境&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pip install virtualenv
$ virtualenv --version
$ cd my_project_folder
$ virtualenv my_project
$ virtualenv -p /usr/bin/python2.7 my_project
$ source my_project/bin/activate
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;2mac安装tensorflow&quot;&gt;2.mac安装TensorFlow&lt;/h3&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install --ignore-installed --upgrade https://storage.googleapis.com/tensorflow/mac/tensorflow-0.9.0-py3-none-any.whl
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;3运行helloworld&quot;&gt;3.运行helloworld&lt;/h3&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;python&lt;/span&gt; 
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tensorflow&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tf&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hello world!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Mon, 07 May 2018 14:32:24 +0800</pubDate>
        <link>http://localhost:4000/2018/05/tensorflow/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/05/tensorflow/</guid>
        
        
      </item>
    
      <item>
        <title>分布式缓存</title>
        <description>&lt;h4 id=&quot;分布式缓存&quot;&gt;分布式缓存&lt;/h4&gt;
</description>
        <pubDate>Fri, 20 Oct 2017 14:32:24 +0800</pubDate>
        <link>http://localhost:4000/2017/10/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/10/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98/</guid>
        
        
      </item>
    
      <item>
        <title>深入理解java虚拟机（2）</title>
        <description>&lt;h3 id=&quot;垃圾回收算法&quot;&gt;垃圾回收算法&lt;/h3&gt;
&lt;h4 id=&quot;标记清除算法&quot;&gt;标记清除算法&lt;/h4&gt;
&lt;p&gt;主要不足：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;效率问题，标记和清除的过程效率都不高&lt;/li&gt;
  &lt;li&gt;空间问题，标记清除之后产生不连续的内存碎片，内存碎片太多会导致在程序运行过程中需要分配较大的对象，无法找到足够的连续内存而不得不提前触发另一次的垃圾回收动作。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;复制算法&quot;&gt;复制算法&lt;/h4&gt;
&lt;p&gt;为了解决效率问题，将可用的内存按照容量划分为大小相等的两块，每次只是使用其中的一块。算法的代价将内存缩小为原来的一半，未免太高了。&lt;br /&gt;
eden survivor0 survivor1&lt;br /&gt;
8     :    1      :       1&lt;br /&gt;
每次新生代容量为90%&lt;/p&gt;

&lt;h4 id=&quot;标记整理算法&quot;&gt;标记整理算法&lt;/h4&gt;

&lt;h4 id=&quot;分代收集算法&quot;&gt;分代收集算法&lt;/h4&gt;
&lt;p&gt;根据新生代和老年代的不同&lt;/p&gt;

&lt;p&gt;在OopMap的协助下，HotSpot可以快速且准确的完成gc roots的枚举
安全点和安全区域&lt;/p&gt;

&lt;p&gt;线程sleep和block状态需要引入安全区域来解决&lt;/p&gt;

&lt;h3 id=&quot;垃圾收集器&quot;&gt;垃圾收集器&lt;/h3&gt;
&lt;p&gt;7种收集器如下图所示&lt;br /&gt;
&lt;img src=&quot;/images/gc.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;serial&quot;&gt;Serial&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/Serial.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
单线程完成收集工作，必须暂停其他所有的工作线程&lt;br /&gt;
从jdk1.3 到 jdk 1.7一直在优化&lt;br /&gt;
从Serial  -&amp;gt; Parallel -&amp;gt; cms(concurrent mark sweep) -&amp;gt; G1 (Garbage first)&lt;br /&gt;
用户停顿的时间在不断缩短，但是仍然没法完全消除&lt;/p&gt;

&lt;p&gt;Serial收集器对于客户端应用来说是很好的选择&lt;/p&gt;

&lt;h4 id=&quot;parnew收集器&quot;&gt;ParNew收集器&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/ParNew.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
-XX:SurvivorRatio  -XX:PretenureSizeThreshold  -XX:HandkePromotionFailure&lt;br /&gt;
ParNew 除了多线程收集以外，其他与Serial相比没有太多创新之处&lt;/p&gt;

&lt;h4 id=&quot;cms&quot;&gt;CMS&lt;/h4&gt;
&lt;p&gt;cms 真正意义上的并发收集器 &lt;br /&gt;
-XX:+UseConcMarkSweepGC&lt;br /&gt;
-XX:+UseParNewGC&lt;/p&gt;

&lt;p&gt;可以使用-XX:ParallelGCThreads&lt;/p&gt;

&lt;p&gt;Parallel Scavenge用于精确控制吞吐量&lt;br /&gt;
-XX:MaxGCPauseMillis 最大垃圾收集停顿时间&lt;br /&gt;
-XX:GCTimeRatio  直接设置吞吐量的大小&lt;/p&gt;

&lt;p&gt;-XX:+UseAdaptiveSizePolicy 打开参数之后GC可以自适应调节策略&lt;br /&gt;
在注重吞吐量和cpu资源敏感 可以优先考虑Parallel Scavenge  加 Parallel Old收集器&lt;/p&gt;

&lt;p&gt;CMS收集器  是以获取最短回收停顿时间为目标的收集器&lt;br /&gt;
分为四个过程&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;初始标记&lt;/li&gt;
  &lt;li&gt;并发标记&lt;/li&gt;
  &lt;li&gt;重新标记&lt;/li&gt;
  &lt;li&gt;并发清楚&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;cms三个缺点&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;对于cpu资源特别敏感，在并发阶段虽然不会导致用户线程停顿，但是会因为占用了一部分线程而导致应用程序变慢，总吞吐量降低，cms默认线程数（cpu数量+3/4），当cpu大于4个时候，并发线程占了不少于25%的cpu资源，当cpu不足4个时候，占用了很大运算能力，导致用户的运算降低了50%，让人无法接受。为了应付这种情况，虚拟机提供了 增量式并发收集器 ，效果很一般&lt;/li&gt;
  &lt;li&gt;cms无法处理浮动垃圾，可能出现Concurrent mode failure 失败导致另一次full GC。由于cms并发清理的阶段，用户线程还在运行，伴随程序还会有新的垃圾产生，这一部分垃圾出现在标记过程之后，cms无法当次收集处理掉他们，只能等到下次GC再处理，这部分垃圾称为浮动垃圾。由于在垃圾收集阶段用户线程还需要运行，那也还需要预留足够的空间给用户线程使用，因此cms不能等到老年代几乎满了再进行收集，需要预留一部分空间提供给并发的程序使用。在jdk1.5默认配置下，cms当老年代使用了68%空间就会被激活，这是一个偏保守的设置，如果应用中老年代增长的不快，可以适当调高-XX:CMSInitiatingOccupancyFraction的值来触发百分比，以降低内存回收次数，获得更好的性能，在jdk1.6中cms启动的阈值已经提高到92%，要是cms运行期间预留的内存无法满足程序的需要，就会出现异常Concurrent Mode Failure 失败，这是虚拟机会启动后备预案，临时启动Serial Old 收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了。所以说-XX:CMSInitiatingOccupancyFraction设置的太高很容易导致Concurrent Mode Failure失败，反而性能下降。&lt;/li&gt;
  &lt;li&gt;cms基于标记清楚算法实现的收集器，收集结束时会有大量的空间碎片的产生，空间碎片过多，会给大对象分配带来很大麻烦，往往出现空间很足，但是无法找到足够大的连续空间分配给当前对象，不得不提前触发full GC。为了解决这个问题，cms提供一个-XX:+UseCMSCompactAtFullCollection开关参数，默认开启，用于cms收集器顶不住要进行full gc合并整理的过程，内存整理的过程是无法并发的，空间问题没问题了，但是停顿时间变长了。虚拟机还提供了另外的参数-XX:CMSFullGCsBeforeCompaction,这个参数设置多少次不压缩的full gc之后跟着来一次带压缩的，默认为0，表示每次进入full gc都进行碎片压缩。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;g1&quot;&gt;G1&lt;/h4&gt;
&lt;p&gt;G1是面向服务端应用的垃圾收集器，Hotspot赋予它的使命是替换掉cms收集器&lt;br /&gt;
G1的优点：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;并行与并发：G1能够充分利用多CPU，多核硬件优势，使用多个cpu来缩短停顿时间，部分其他收集器需要停顿java线程来执行gc操作，G1可以通过并发方式让java程序继续执行。&lt;/li&gt;
  &lt;li&gt;分代收集：与其他收集器一样，分代的概念在G1中依然得到保留，虽然G1可以不需要其他收集器配合就能管理整个堆，能采用不同的方式去处理新创建的对象和已经存活的对象，熬过多次gc的旧对象以获取更好的收集效果。&lt;/li&gt;
  &lt;li&gt;空间整合，与cms标记清理算法不同，G1从整体来看基于标记-整理算法实现的收集器，从局部两个Region之间来看基于复制算法实现的，但无论如何，这两种算法都意味着G1运行期间不会产生内存空间碎片，收集后供规整的可用内存，这种特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间触发下一次的Full GC；&lt;/li&gt;
  &lt;li&gt;可预测的停顿：这是G1相对于cms另一大优势，降低停顿时间是G1和CMS共同的关注点，单G1追求低停顿以外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒时间片段内，消耗在垃圾收集上的时间不得超过N毫秒，这已经是实时java（RSTJ）时代的特征了。&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sun, 10 Sep 2017 14:32:24 +0800</pubDate>
        <link>http://localhost:4000/2017/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA-2/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA-2/</guid>
        
        
      </item>
    
      <item>
        <title>深入理解java虚拟机（1）</title>
        <description>&lt;h3 id=&quot;java内存模型分为&quot;&gt;java内存模型分为：&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;虚拟栈
本地方法栈
堆
程序计数器
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;虚拟栈&quot;&gt;虚拟栈&lt;/h4&gt;
&lt;p&gt;java 虚拟机栈，用于存储局部变量，操作数栈，动态链接，方法出口信息&lt;/p&gt;

&lt;h4 id=&quot;本地方法栈&quot;&gt;本地方法栈&lt;/h4&gt;
&lt;p&gt;本地方法栈用于存储虚拟机使用到的native方法&lt;/p&gt;

&lt;h4 id=&quot;java堆&quot;&gt;java堆&lt;/h4&gt;
&lt;p&gt;java堆 是java虚拟机管理内存中最大的区域，java堆是被所有线程共享的&lt;br /&gt;
java堆基本配置：-Xmx -Xms&lt;br /&gt;
方法区与java堆一样，是各个线程之间内存区域，用于存储已被虚拟机加载的类信息，常量，静态变量，即编译后的代码等数据， 永久代&lt;br /&gt;
直接内存&lt;br /&gt;
nio为了提高效率，采取了直接读取内存的方式&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;如何判断对象是否存活？&lt;/p&gt;
      &lt;ol&gt;
        &lt;li&gt;某些人说是用的计数算法，那两个对象之间相互引用是怎么说的&lt;/li&gt;
        &lt;li&gt;可达性分析算法&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;在java语言中可作为GC Roots的对象包括如下几种&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;虚拟机栈中引用的对象&lt;/li&gt;
  &lt;li&gt;方法区中静态属性引用的对象&lt;/li&gt;
  &lt;li&gt;方法区中常量引用的对象&lt;/li&gt;
  &lt;li&gt;native方法引用的对象&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;无用的类？&lt;br /&gt;
该类的所有的实例都已经被回收，也就是Java堆中不存在该类的所有实例
加载该类的classLoader已经被回收&lt;br /&gt;
该类对应的java.lang.class对象没有任何地方被引用，无论在任何地方通过反射访问该类的方法&lt;/p&gt;

</description>
        <pubDate>Wed, 30 Aug 2017 14:32:24 +0800</pubDate>
        <link>http://localhost:4000/2017/08/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA-1/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA-1/</guid>
        
        
      </item>
    
      <item>
        <title>17年下半年学习规划</title>
        <description>&lt;p&gt;下半年学习规划&lt;/p&gt;
&lt;h3 id=&quot;了解分布式架构&quot;&gt;了解分布式架构&lt;/h3&gt;
&lt;h4 id=&quot;探索性学习&quot;&gt;探索性学习&lt;/h4&gt;

</description>
        <pubDate>Tue, 25 Jul 2017 14:32:24 +0800</pubDate>
        <link>http://localhost:4000/2017/07/%E4%B8%8B%E5%8D%8A%E5%B9%B4%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/07/%E4%B8%8B%E5%8D%8A%E5%B9%B4%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</guid>
        
        
      </item>
    
      <item>
        <title>监控与报警</title>
        <description>&lt;h3 id=&quot;监控与报警&quot;&gt;监控与报警&lt;/h3&gt;
&lt;p&gt;statsd+graphite+grafana&lt;/p&gt;

</description>
        <pubDate>Tue, 09 May 2017 14:32:24 +0800</pubDate>
        <link>http://localhost:4000/2017/05/%E7%9B%91%E6%8E%A7%E4%B8%8E%E6%8A%A5%E8%AD%A6/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/%E7%9B%91%E6%8E%A7%E4%B8%8E%E6%8A%A5%E8%AD%A6/</guid>
        
        
      </item>
    
      <item>
        <title>服务发现与配置中心</title>
        <description>&lt;h3 id=&quot;服务发现配置中心&quot;&gt;服务发现配置中心&lt;/h3&gt;
&lt;p&gt;zookeeper&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Apr 2017 14:32:24 +0800</pubDate>
        <link>http://localhost:4000/2017/04/%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E4%B8%8E%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E4%B8%8E%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</guid>
        
        
      </item>
    
      <item>
        <title>CI/CD灰度发布</title>
        <description>&lt;h3 id=&quot;cicd灰度发布&quot;&gt;CI/CD灰度发布&lt;/h3&gt;
&lt;p&gt;jekins + docker&lt;/p&gt;

</description>
        <pubDate>Sat, 15 Apr 2017 14:32:24 +0800</pubDate>
        <link>http://localhost:4000/2017/04/CI-CD%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/CI-CD%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83/</guid>
        
        
      </item>
    
      <item>
        <title>负载均衡</title>
        <description>&lt;h3 id=&quot;负载均衡&quot;&gt;负载均衡&lt;/h3&gt;
&lt;p&gt;轮询&lt;/p&gt;

</description>
        <pubDate>Mon, 27 Mar 2017 14:32:24 +0800</pubDate>
        <link>http://localhost:4000/2017/03/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</guid>
        
        
      </item>
    
      <item>
        <title>SOA框架</title>
        <description>&lt;p&gt;上半年学习规划&lt;/p&gt;
&lt;h3 id=&quot;soa框架&quot;&gt;SOA框架&lt;/h3&gt;

</description>
        <pubDate>Sun, 12 Mar 2017 14:32:24 +0800</pubDate>
        <link>http://localhost:4000/2017/03/SOA%E6%A1%86%E6%9E%B6/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/SOA%E6%A1%86%E6%9E%B6/</guid>
        
        
      </item>
    
  </channel>
</rss>
